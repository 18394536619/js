1.
  封装函数：数组封装修个代码块实现代
            码的复用
	    方法名字的首字母是小写
            function  test(){
	    }
	    调用:   test();

  构造函数：构造对象
            方法名字的首字母是大写
	    function Test(){
	    }
	    new  Test();

只要是函数，那么在内存中存在一个原型

Array：构造函数
Array.isArray();
Array.slice()
new Array().slice();

function   Array(){
   isArray:function(){
   }
}
Array.prototype.sayHello=function(){

}
-----------
1.数组的构建
    构造器
    字面量
2. 数组的使用
   通过数组下标操作数组本身，从0开始
   到length-1结束
   自动扩建
   for     while  do  while 
   for  in 
3.arr中常用的方法（var arr  =[1,2]）
 如果使用arr.方法代表方法被存储函数的原型中
 凡是使用Array存储在Array里面
  toString()
  valueOf()
  join("||")
  添加或者删除数据：
    数组末尾：
       push
       pop
    操作数组头部
      shift
      unshift
排序：
　　　sort:指定排序规则
     sort(function(a,b){
          return  -(a-b);
     })
     var xx  =function(a,b){
     }
     sort(xx);

      反排序：reverse() 
      
      :自己写算法排序
         冒泡
	 插入
-----------------
数组的迭代：
  1.
  forEach(function(obj,index,arr){
    //第一个参数代表数组中的元素
    第二个参数代表当前元素的下标
    第三个参数代表循环遍历的是哪个数组
  })
  ----------------
  var  arr =[10,80,99];
  function  test(obj,index,arr1){
    console.log(obj)
    console.log(index)
    console.log(arr1);
  }
  for(var  i =0;i<arr.length;i++){
    test(arr[i],i,arr);
  }
----------------------
Array.prototype.myForEach(method){
//this  ---arr
 method =function(obj,index,arr1)
 for(var  i =0;i<this.length;i++){
   method(this[i],i,this);
 }

}
//this 
arr.myForEach(function(obj,index,arr1){

})
-------------
every(function(obj,index,arr1){
 
})
-------------
forEach   filter  map 
every  some:
1.参数都为回调函数
2.回调函数中的参数第一个都为数组中的数据
第二个都为下标，第三个都为数组本身
不同点：
  filter  map   every  some 根据return
  获取的结果不同
  -------------
  JQuery
------------------------
正则表达式：不属于js
 1.作用
 2.声明与创建
     js  ： RegExp():构造函数

     var  reg  = new RegExp("需要匹配的字符串或者是规则","修饰符");
     var  reg  =new RegExp("abc","ig");
     
     字面量形式：
       var   reg =/需要匹配的字符串/修饰符；
       var  reg  =/abc/ig;

  2.正则表达式的使用：
     var  result  =reg.exec("字符串")；
    result:是一个类数组对象，保存的是匹配到的
    字符串
    第一个是匹配的字符串
    index
    input
    
   
    