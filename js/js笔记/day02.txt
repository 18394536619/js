1，操作符
	01) 一元操作符
		++,--,+,-操作符应用任何类型数值都返回一个【数值类型】，先将任意类型的值转换为Number然后进行运算(通过Number()方法进行转换)
		1.递增 ++  
			var a = "11";
			1+a++;
			1+ ++a;

			前置：操作该变量之前进行递增或者递减操作
			后置：操作该变量之后进行递增或者递减操作
			对任意数据类型的操作数都适用，使用前先将其转换为数字(Number())，然后再进行运算,在应用于对象的时候，优先先调用对象的valueOf方法，以取得一个可供操作的值,如果子类对象仅重写了toString(),调用该方法。
		2.递减 --
			前置：操作该变量之前进行递增或者递减操作
			后置：操作该变量之后进行递增或者递减操作
			对任意数据类型的操作数都适用，使用前先将其转换为数字，然后再进行运算在应用于对象的时候，先调用对象的valueOf方法，以取得一个可供操作的值,如果子类对象仅重写了toString(),调用该方法。
		3.加 +
			相当于调用Number();
			var a = "12"
			+ a ;	// 12  相当于调用了Number("12")
			+ "123abc"		//
		4.减 -
			将一元减应用于数值时，数值会变成负数。
			将一元减应用于非数值时，遵循与一元加操作符相同的规则，最后将得到的数值转化为负数

	02) 布尔操作符, 非(NOT)
		逻辑非 !
		该操作符应用任何类型数值都返回一个【布尔值】。先将任意类型的数值转换为Boolean，然后取反，
			!a ==> !Boolean(a)
			!0	//true
			!""	//true	
			!NaN	//true	
			!false	//true				

			连用两次逻辑非 ，就可以将任意数据类型转化为Boolean类型，!!a ==> Boolean(a)
			!!""	//false
    	03) 逻辑与 && (同真才真，有假则假) 也被称为短路语句
		可应用于任意数值。
		 如果两个都为Boolean类型，同真是true    false
		如果有一个操作数不是布尔类型，逻辑与就不一定返回boolean类型
		1.如果第一个操作数是 
			null,NaN,undefined,false,0,""可被转换为false的值的时候返回该值
		2.如果第一个数其他，返回第二个数
			var s1 = 8;
			var s2 = "briup";
			var s3 = "";
			var result	= s1 && s2;	//briup
			var result2 = s3 && s2;	//空字符串

    	04) 逻辑或 ||(有真则真，同假才假)
		false || 
		如果两个操作数都是null,NaN,undefined,false,0,""可被转换为false的值的时候返回该值，返回第二个数

		如果第一个操作数是null,NaN,undefined,false,0,"" 则返回第二个操作数

                如果第一个数是真,那么直接返回第一个数

    	05) 加性操作符
		1. 加法 +
			m + n
			1) 当m,n不为String,Object类型的时候，先将m,n转换为Number类型（Number()），然后再进行计算
				true + false; //1；Number(true)+Number(false);
				true + 1;	  //2；Number(true) + 1
				null + undefined; //NaN；Number(undefined) -> NaN
			2) 当m,n有一个为String,无论另一个操作数为何（但不为对象）都要转换为String，然后再进行拼接
				"1" + true;	// 1	true
				"1" + undefined;//  1undefined
				"1" + 1;	//		11
			3) 当m,n 有一个为对象，如果该对象既重写toString,又重写了valueOf方法，先调用valueOf方法获取返回值，将该返回值和另外一个操作数进行运算。如果该对象没有重写valueOf方法，将调用toString方法获取返回值，将该返回值和另外一个操作数进行运算。
				var o = {
					name:"briup",
					valueOf:function(){
						return 1;
					}
				}
				o+1;		//2；o+1
		
		2. 减法 -
			返回值为【数值类型】。无论操作数为任何类型，先将其使用Number()转换器转换为Number类型(Object)，然后再计算。
			true - 1;		//0;	1-1
			null - true;	//-1 ;	0-1
			1 - undefined	//NaN
			var o = {
				name:"briup",
				valueOf:function(){
					return 1;
				}
			}
			o-1;		//0;	1-1
	 
	06) 乘性操作符
		返回值为【数值类型】当操作数为非数值的时候执行自动的类型转化Number()
		1. 乘法 *
			如果两个数都是数值，执行常规的乘法计算
			如果一个操作数是NaN,结果为NaN
			超过数值范围返回Infinity
			如果有一个操作数不是数值，则先调用Number()将其转换为数值。
			
		2. 除法 /
			如果一个操作数是NaN,结果为NaN （0/0 ; NaN）
			一个非0值除0 Infinity   
			如果有一个操作数不是数值，则先调用Number()将其转换为数值。
			var s1 = 5;
			var s2 = 2;
			var result = s1/s2;  //2.5
		3. 取余 %
			如果两个数都是数值，执行常规的取余计算
			如果一个操作数是NaN,结果为NaN（任意数%0 ; NaN）
			如果有一个操作数不是数值，则先调用Number()将其转换为数值。

	07) 关系操作符
		< > <= >=  ,返回一个【Boolean】值
		1.如果两个操作数是字符串，比较字符串中对应位置的每个字符的字符编码值
			"a">"b"	//false
			"1">"a"	//false
		2.如果一个操作数是数值，将另外一个操作数也转换为数值进行比较
			"3">1;			//true
			3>true;			//true 3>Number(true)
			3>undefined;	//false Number(undefined)=NaN ;任何数和NaN比较结果都为false
		3.如果一个操作数是对象，先调用valueOf(),再调用toString()将返回值与另外一个操作数比较，如果没有重写toString() valueOf()则始终为false
			var o = {
				name:"briup",
				valueOf:function(){
					return "13";
				}
			}
			o>2		// true ; "13">2
    08) 相等操作符,返回【Boolean】
		1.相等和不相等 ==, != (先转换在比较)
			1)Number类型与boolean类型，比较前先将Boolean转换为数值。
			2)Number类型与字符串类型，比较前先将字符串转换为数值
			3)Number类型与undefined类型，结果为 false
			4)Number类型与null类型，结果为 false
			5)如果两个都是字符串，比较字符序列
			6)如果两个都是对象，比较的是对象的引用地址
			7)null == undefined		//true
			8)NaN与任何值（包括NaN）比较结果都为false

			如果两个数都为对象，则比较他们是不是同一个对象，如果两个操作数都指向同一个对象，返回true
			如果一个数是对象，另外一个数不是，则调用valuesOf()方法，用得到的基本数据类型进行比较

		2.全等和不全等
			仅比较不转换，先比较两个数所属的数据类型，如果类型不同则不同，如果类型相同，再继续比较两个数的值
			console.log("55" == 55); true
			console.log("55" === 55);false
			null == undifined;		//true
			null === undifined;		//false

    09) 三目运算符 ? : 
		variable = boolean_expression ? true_value : false_value;
		如果boolean_expression为true,将true_value赋给variable，否则将false_value赋给variable
	    
		例如：求任意两个数之间最大值
	       function max(m,n){
				return m>n?m:n;	//如果m>n为true返回m,如果m>n为false,返回n
	       }
    10) 赋值运算符 = 
       将右侧的值赋给左侧的变量
       可以和其他算术运算符连用 *= /= %= += -= 
	   var a = 4;

       a *= 3; //=> a = a*3;
    11) 逗号操作符
       可以在一条语句中执行多个操作
       var num1=1,num2 = 2, num3 = 3;
2，流程控制语句
    01) if语句
		if(condition){
			statement1
		}else{
			statement2
		}
		condition表示任意表达式，该表达式求值的结果不一定是布尔类型，如果不是布尔类型，ECMAScript会调用Boolean() 转换函数将这个表达式结果转换为一个布尔类型，如果condition求值结果为true,执行statement1。如果求值结果为false，执行statement2

		if(condition){
			statement1
		}
		statement2

		
    02)switch语句
		switch(expression){
			case val:
				break;
			case val2:
				break;
			default:
		}
		==>
		switch(expression){
			case val:{

				break;
			}
			case val2:{
				break;
			}
			default:
		}
      可以在switch语句中使用任何数据类型。
      case的值不一定是常量，也可以是变量，甚至是表达式。
	  expression === val
	  break


3. 循环语句	
	01)for语句
		for循环是一种前测试循环语句，但它具有在执行循环之前初始化变量和定义循环后要执行的代码的能力。以下是for循环的语法：初始化表达式，控制表达式，循环后表达式
		for(initialization;expression;post-loop-expression){
			//loop option
		}
		例如:
		var sum = 0;
		for(var i=0;i<10;i++){
			sum +=i;
		}
		console.log(i); //10  

		ECMAScript不存在块级作用域，在循环内部定义的变量也可以在外部访问到
	
		死循环
		for(;;){
			//当for中的表达式省略的时候，会创建一个死循环
		}
		while(true){
		
		}
	02) do-while语句  
		do{
		
		}while(condition); 
		后测试循环语句，即只有在循环体中的代码执行之后，才会测试出口条件。循环体内的代码最少被执行一次。

	03)	while语句	
		while(condition){
		
		}
		前测试循环语句，即在循环体内的代码被执行之前，就会对出口条件求值。因此，循环体内的代码有可能永远不会被执行。
		while(false){
			//
		}
    04) for-in 语句
		是一种精准的迭代语句，可以用来枚举对象的属性
		for(property in expression){
			statement
		}
		例如:
		打印出window对象中所有的属性
			for(var propName in window){
				console.log(propName);
			}
    label 语句
		使用label可以在代码中添加标签，以便将来使用
		label : for(int i=0;i<10;i++){
			if(i == 5){
				break label;
			}
		}
    循环关键字
       break	跳出循环体
       continue 结束本次循环，进行下一次循环

3. 特殊语句
	with语句
	主要作用是将代码的作用域设置在一个特定的对象中，定义with语句的主要目的是为了简化多次访问同一个对象的工作，但是大量使用with语句会导致性能下降，并且难以维护，所以不建议使用。
		例如：
		var person = {
			name:'terry',
			age:12,
			gender:'男'
		}
		要想访问person对象中的属性需要：
			console.log(person.name);
			console.log(person.age);
			console.log(person.gender);
		但是还可以通过with语句来实现
			with(person){
				console.log(name);
				console.log(age);
				console.log(gender);
			}
4. 函数（第一部分）
	函数实际上是对象，每个函数都是Function类型的实例，具有属性和方法，函数名实际上是指向函数对象的指针。
    1) 表示方法:
		1.函数声明
		function sum(a,b){
			return a+b;
        }
		2.函数表达式
		var sum = function(a,b){
				return a+b;
        }
		解析器在向执行环境中加载数据时，会率先读取函数声明，并使其在执行任何代码之前可用；当执行器执行到函数表达式的代码的时候才会真正的解释执行
	2) 函数的参数
		ECMAScript函数的参数与大多数其他语言中的函数的参数有所不同，ECMAScript函数不介意传递参数的个数以及参数类型，这是因为函数的参数在函数内容是使用一个类数组对象来表示的。这个类数组对象就是arguments
	3) 函数的调用
		在JS中，函数没有重载的概念，两个函数的函数名相同即是同样一个函数，但是Java中不是
			函数名(实参列表)

    